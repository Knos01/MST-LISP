;;;; -*- Mode: Lisp -*-

(defparameter *vertices* (make-hash-table :test #'equal))
(defparameter *arcs* (make-hash-table :test #'equal))
(defparameter *graphs* (make-hash-table :test #'equal))
(defparameter *visited* (make-hash-table :test #'equal))
(defparameter *vertex_keys* (make-hash-table :test #'equal))
(defparameter *previous* (make-hash-table :test #'equal))
(defparameter *heap* (make-hash-table :test #'equal))

;usare (inspect *hash-table*) per visualizzarne il contenuto

;;;; is-graph/1

(defun is-graph (graph-id)
  (gethash graph-id *graphs*))

;;;; new graph/1

(defun new-graph (graph-id)
  (or (gethash graph-id *graphs*)
  (setf (gethash graph-id *graphs*) graph-id)))

;;;; delete graph/1

(defun delete-graph (graph-id)
  (remhash graph-id *graphs*))

;;;; new vertex/2

(defun new-vertex (graph-id vertex-id)
  (setf (gethash (list 'vertex graph-id vertex-id) *vertices*) ;chiave
        (list 'vertex graph-id vertex-id))) ;valore

;;;; graph vertices/1

(defun graph-vertices (graph-id)
  (let ((vertex-rep-list ()))
        (maphash (lambda (k v)
                   (if (equal (second k) graph-id)
                       (push v vertex-rep-list))
                   ) *vertices*)
        vertex-rep-list ))


;;;; new arc

(defun new-arc (graph-id vertex-id vertex-id &optional weight)
  (setf (gethash (list 'arc graph-id arc-id) *arcs*)
  (list 'arc graph-id arc-id)))

(defun find-arc (g u v)
  (or (gethash (list g u v) *arcs)
      (gethash (list g v u) *arcs)))

; (equal (second (gethash '(vertex graphino v) *vertices*)) 'graphino)


;;;; graph arcs

;;; cos'è vertex rep list????

;;;; graph vertex neighbors


;;;; graph vertex adjacent



;;;; graph print

(defvar a (make-array 10))

(defun get-a (array i) (aref array i))

;;; TEST

(new-graph 'graphino)
(new-vertex 'graphino 'v)

;;;; end of file -- mst.lisp



